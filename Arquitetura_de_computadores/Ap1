//Turma 2A - Grupo D
//Bryan Amorim - 2024 0161 4513
//José Pedro Oliveira - 2023 0311 7159
//Matheus Cocenzo - 2021 0729 1052
//Cesár Viana Barros - 2023 0315 3198
//Gabriel Matias do Carmo sica - 2023 0816 1946



#include <Arduino.h>

// LEDs do painel que mostra as horas restantes em complemento de 1
#define LED_A1 6 // LED mais significativo
#define LED_A2 5
#define LED_A3 4
#define LED_A4 3
#define LED_A5 2 // LED menos significativo

// Chaves que definem a hora_final
#define C1 22 // Pino menos significativo
#define C2 24
#define C3 26
#define C4 28
#define C5 30 // Pino mais significativo

// Chaves que definem a hora_ativacao
#define B1 36
#define B2 38
#define B3 40
#define B4 42
#define B5 44

// Outros pinos
#define sensor 7
#define buzzer 8
#define chave 11
#define OFF 13
#define ON 12

bool sistema_ligado = true; // Variável para controlar o estado do sistema

void setup() {
  Serial.begin(9600);

  // Configuração dos pinos de entrada e saída
  pinMode(LED_A1, OUTPUT);
  pinMode(LED_A2, OUTPUT);
  pinMode(LED_A3, OUTPUT);
  pinMode(LED_A4, OUTPUT);
  pinMode(LED_A5, OUTPUT);

  pinMode(C1, INPUT);
  pinMode(C2, INPUT);
  pinMode(C3, INPUT);
  pinMode(C4, INPUT);
  pinMode(C5, INPUT);

  pinMode(B1, INPUT);
  pinMode(B2, INPUT);
  pinMode(B3, INPUT);
  pinMode(B4, INPUT);
  pinMode(B5, INPUT);

  pinMode(sensor, INPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(chave, INPUT);
  pinMode(OFF, OUTPUT);
  pinMode(ON, OUTPUT);

  // Inicialmente, o sistema está ligado
  digitalWrite(ON, HIGH);
  digitalWrite(OFF, LOW);
}

void loop() {
  // Verificar imediatamente o estado da chave
  if (!digitalRead(chave)) { // Se a chave estiver desligada (LOW)
    if (sistema_ligado) { // Verifica se o sistema estava ligado
      // Desliga o sistema se a chave está desligada
      digitalWrite(ON, LOW);
      digitalWrite(OFF, HIGH);
      Serial.println("O sistema está desligado.");
      sistema_ligado = false;

      // Aguarda até que a chave seja liberada para reiniciar o sistema
      while (!digitalRead(chave)) {
        delay(100);
      }
      
      // Reinicia o sistema quando a chave é liberada (HIGH)
      digitalWrite(ON, HIGH);
      digitalWrite(OFF, LOW);
      Serial.println("O sistema está ligado.");
    }
    return; // Encerra o loop imediatamente se a chave estiver desligada
  }

  // Se a chave está em HIGH, o sistema está ligado e em funcionamento

  // Ler hora atual da porta serial no formato horas:minutos
  Serial.println("Insira o horário atual (horas:minutos):");
  while (!Serial.available()) {} // Aguarda até que haja dados disponíveis
  String input = Serial.readStringUntil('\n'); // Ler entrada até encontrar uma quebra de linha
  int hora_atual = input.substring(0, input.indexOf(':')).toInt(); // Extrair hora atual
  int minuto_atual = input.substring(input.indexOf(':') + 1).toInt(); // Extrair minuto atual

  // Ler hora de ativação e hora final definidas pelas chaves
  int a = digitalRead(C1);
  int b = digitalRead(C2);
  int c = digitalRead(C3);
  int d = digitalRead(C4);
  int e = digitalRead(C5);
  int hora_final = devolve_decimal(a, b, c, d, e);

  int f = digitalRead(B1);
  int g = digitalRead(B2);
  int h = digitalRead(B3);
  int i = digitalRead(B4);
  int j = digitalRead(B5);
  int hora_ativacao = devolve_decimal(f, g, h, i, j);

  // Verificar se a hora atual está dentro do intervalo permitido
if (hora_atual < hora_ativacao || hora_atual > hora_final ||
    (hora_atual == hora_ativacao && minuto_atual < 0) ||
    (hora_atual == hora_final && minuto_atual >= 0)) {
    Serial.println("Fora do horário de funcionamento");
    pisca_led();
    pisca_led();
    pisca_led();
    delay(1000); // Aguarda antes de verificar novamente
    return; // Encerra o loop se estiver fora do horário permitido
  }

  Serial.print("Hora de ativação: ");
  Serial.print(hora_ativacao);
  Serial.println(":00");
  Serial.print("Hora de desativação: ");
  Serial.print(hora_final);
  Serial.println(":00");
  Serial.print("Hora atual: ");
  if (hora_atual<10){
    Serial.print("0");
  }
  Serial.print(hora_atual);
  Serial.print(":");
  if (minuto_atual<10){
    Serial.print("0");
  }
  Serial.println(minuto_atual);

  // Calcular diferença de tempo até a hora final
  int horas_restantes = hora_final - hora_atual - 1;
  int minutos_restantes = 59 - minuto_atual; // Começar com 59 minutos

  int contador_segundos = 0;

  // Loop para contagem regressiva
  while (horas_restantes >= 0) {
    // Verificar continuamente o estado da chave
    if (!digitalRead(chave)) { // Se a chave estiver desligada (LOW)
      Serial.println("A chave foi desligada!");
      digitalWrite(ON, LOW);
      digitalWrite(OFF, HIGH);
      digitalWrite(LED_A1, LOW);
      digitalWrite(LED_A2, LOW);
      digitalWrite(LED_A3, LOW);
      digitalWrite(LED_A4, LOW);
      digitalWrite(LED_A5, LOW);
      // Aguarda até que a chave seja liberada para encerrar o loop
      while (!digitalRead(chave)) {
        delay(100);
      }
      break; // Encerra o loop de contagem regressiva
    }

    acende_led(horas_restantes);

    // Verificar sensor para ativar buzzer
    if (digitalRead(sensor) == HIGH) {
      digitalWrite(buzzer, HIGH);
      delay(5000); // Aguarda 5 segundos (tempo do buzzer)
      digitalWrite(buzzer, LOW);
      contador_segundos += 5; // Incrementa 5 segundos devido ao atraso do buzzer
    } else {
      contador_segundos++;
    }

    // Exibir tempo restante a cada ciclo do loop
    Serial.print("Tempo restante: ");
    if (horas_restantes < 10) {
      Serial.print("0"); // Adiciona zero à esquerda se necessário
    }
    Serial.print(horas_restantes);
    Serial.print(":");
    if (minutos_restantes < 10) {
      Serial.print("0"); // Adiciona zero à esquerda se necessário
    }
    Serial.println(minutos_restantes);
//    Serial.print(":");
//    Serial.println(60 - contador_segundos);

    // Verificar se passaram 60 segundos
    if (contador_segundos >= 60) {
      contador_segundos -= 60; // Subtrai 60 segundos do contador
      minutos_restantes--; // Decrementa os minutos

      // Verificar se os minutos restantes passaram para negativo
      if (minutos_restantes < 0) {
        minutos_restantes = 59; // Reinicia os minutos
        horas_restantes--; // Decrementa as horas
      }
    }

    delay(1000); // Aguardar 1 segundo
  }

  // Desliga LEDs no final da contagem regressiva
  digitalWrite(LED_A1, LOW);
  digitalWrite(LED_A2, LOW);
  digitalWrite(LED_A3, LOW);
  digitalWrite(LED_A4, LOW);
  digitalWrite(LED_A5, LOW);

  delay(1000); // Aguarda antes de verificar novamente
}

// Função para converter um número binário (representado por 5 pinos) para decimal
int devolve_decimal(int a, int b, int c, int d, int e) {
  return a + b * 2 + c * 4 + d * 8 + e * 16;
}


void acende_led(int hora) {
  //Essa gambiarra toda é para que os LEDs não pisquem todos acesos antes de mostrar corretamente
  //inicialmente, estava usando no começo um digitalWrite(An, HIGH) e depois vindo desligando cada um
  //Entretanto, piscavam todos acesos a cada vez que a funçao era chamada 
  //Desse modo, garante que isso não aconteça
  if (hora >= 16) {
    if (digitalRead(LED_A1) == HIGH) {
      digitalWrite(LED_A1, LOW);
    }
    hora -= 16;
  } else if (digitalRead(LED_A1) == LOW) {
    digitalWrite(LED_A1, HIGH);
  }
  if (hora >= 8) {
    if (digitalRead(LED_A2) == HIGH) {
      digitalWrite(LED_A2, LOW);
    }
    hora -= 8;
  } else if (digitalRead(LED_A2) == LOW) {
    digitalWrite(LED_A2, HIGH);
  }
  if (hora >= 4) {
    if (digitalRead(LED_A3) == HIGH) {
      digitalWrite(LED_A3, LOW);
    }
    hora -= 4;
  } else if (digitalRead(LED_A3) == LOW) {
    digitalWrite(LED_A3, HIGH);
  }
  if (hora >= 2) {
    if (digitalRead(LED_A4) == HIGH) {
      digitalWrite(LED_A4, LOW);
    }
    hora -= 2;
  } else if (digitalRead(LED_A4) == LOW) {
    digitalWrite(LED_A4, HIGH);
  }
  if (hora >= 1) {
    if (digitalRead(LED_A5) == HIGH) {
      digitalWrite(LED_A5, LOW);
    }
  } else if (digitalRead(LED_A5) == LOW) {
    digitalWrite(LED_A5, HIGH);
  }
}
// Função para piscar os LEDs
void pisca_led() {
  digitalWrite(LED_A1, HIGH);
  digitalWrite(LED_A2, HIGH);
  digitalWrite(LED_A3, HIGH);
  digitalWrite(LED_A4, HIGH);
  digitalWrite(LED_A5, HIGH);
  delay(500);
  digitalWrite(LED_A1, LOW);
  digitalWrite(LED_A2, LOW);
  digitalWrite(LED_A3, LOW);
  digitalWrite(LED_A4, LOW);
  digitalWrite(LED_A5, LOW);
  delay(500);
}
